–Ø —É–∂–µ –ø–∞—Ä—É –ª–µ—Ç –ø–∏—à—É –Ω–∞ Java/Kotlin, –∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞ Kotlin, –∏ –ø–æ–Ω—è–ª, —á—Ç–æ —è –æ—á–µ–Ω—å —Å–ª–∞–±–æ –≤–ª–∞–¥–µ—é –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—è–º–±–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π, —Ç.–µ. –∫–æ–≥–¥–∞ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏–π. –ë—É–¥—å –¥–æ–±—Ä, —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?


### –ß—Ç–æ —Ç–∞–∫–æ–µ –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è?

–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ Kotlin - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤.

–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –í Kotlin –ª—è–º–±–¥—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö `{}` –∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è.

### –ë–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ Kotlin –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:

```kotlin
{ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã -> —Ç–µ–ª–æ_–ª—è–º–±–¥—ã }
```

–ù–∞–ø—Ä–∏–º–µ—Ä, –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É:

```kotlin
val sum = { a: Int, b: Int -> a + b }
println(sum(2, 3))  // –í—ã–≤–æ–¥: 5
```

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—è–º–±–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞

–§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∏—Ö. –õ—è–º–±–¥—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–∞–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.

#### –ü—Ä–∏–º–µ—Ä 1: –§—É–Ω–∫—Ü–∏—è `map`

–§—É–Ω–∫—Ü–∏—è `map` –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª—è–º–±–¥—É –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

```kotlin
val numbers = listOf(1, 2, 3, 4, 5)
val squared = numbers.map { it * it }
println(squared)  // –í—ã–≤–æ–¥: [1, 4, 9, 16, 25]
```

–ó–¥–µ—Å—å `it` ‚Äî —ç—Ç–æ –Ω–µ—è–≤–Ω–æ–µ –∏–º—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ª—è–º–±–¥—ã.

#### –ü—Ä–∏–º–µ—Ä 2: –§—É–Ω–∫—Ü–∏—è `filter`

–§—É–Ω–∫—Ü–∏—è `filter` –æ—Ç–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é, –∑–∞–¥–∞–Ω–Ω–æ–º—É –ª—è–º–±–¥–æ–π.

```kotlin
val evenNumbers = numbers.filter { it % 2 == 0 }
println(evenNumbers)  // –í—ã–≤–æ–¥: [2, 4]
```

#### –ü—Ä–∏–º–µ—Ä 3: –§—É–Ω–∫—Ü–∏—è `forEach`

–§—É–Ω–∫—Ü–∏—è `forEach` –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª—è–º–±–¥—É –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏.

```kotlin
numbers.forEach { println(it) }
// –í—ã–≤–æ–¥:
// 1
// 2
// 3
// 4
// 5
```

### –õ—è–º–±–¥—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

–ï—Å–ª–∏ –ª—è–º–±–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏—Ö –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —è–≤–Ω–æ:

```kotlin
val sum = { a: Int, b: Int -> a + b }
println(sum(2, 3))  // –í—ã–≤–æ–¥: 5
```

### –õ—è–º–±–¥—ã –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π

–õ—è–º–±–¥—ã —á–∞—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—è–º–±–¥—É:

```kotlin
fun operateOnNumbers(a: Int, b: Int, operation: (Int, Int) -> Int): Int {
    return operation(a, b)
}

val result = operateOnNumbers(4, 2) { x, y -> x + y }
println(result)  // –í—ã–≤–æ–¥: 6
```

–ó–¥–µ—Å—å `operation` ‚Äî —ç—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ `Int` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `Int`.

### –õ—è–º–±–¥—ã —Å –ø—Ä–∏–µ–º–Ω–∏–∫–∞–º–∏ (Extension Function Literals)

–í Kotlin –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—è–º–±–¥—ã —Å –ø—Ä–∏–µ–º–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –ª—è–º–±–¥—ã:

```kotlin
val greet: String.() -> String = { "Hello, $this!" }

println("World".greet())  // –í—ã–≤–æ–¥: Hello, World!
```

### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥. –û–Ω–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Å—è, –∏ —Å–∫–æ—Ä–æ —Ç—ã –±—É–¥–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å –Ω–∏–º–∏ –∫–∞–∫ —Ä—ã–±–∞ –≤ –≤–æ–¥–µ!

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å ‚Äî —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä


–ø—Ä–æ–¥–æ–ª–∂–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª—è–º–±–¥. –¢—ã —Å–º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å (—Ç—ã –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç), –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—è–º–±–¥—ã –≤ —Ç–∞–∫–æ–º –ø—Ä–∏–º–µ—Ä–µ:
```
data class TestCase<T>(
	val desc: String,
	val validator: ((Result<T>) -> Unit)?,
	val mockFun: () -> Unit
)
```
–≠—Ç–æ—Ç –∫–ª–∞—Å—Å —è —É–≤–∏–¥–µ–ª –≤ —Ç–µ—Å—Ç–∞—Ö –Ω–∞—à–µ–≥–æ 'spring boot kotlin' –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ö–æ–Ω–µ—á–Ω–æ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—è–º–±–¥—ã –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ `TestCase`. –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ (`desc`), –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (`validator`), –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è (`mockFun`).

### –†–∞–∑–±–µ—Ä–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ:

1. **`desc: String`** ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞. –ù–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ.

2. **`validator: ((Result<T>) -> Unit)?`** ‚Äî —ç—Ç–æ nullable –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `Result<T>` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `Unit` (–Ω–∏—á–µ–≥–æ). –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞.

3. **`mockFun: () -> Unit`** ‚Äî —ç—Ç–æ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `Unit`. –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏).

### –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.

#### –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º

```kotlin
data class Result<T>(val value: T)

fun main() {
    val testCase = TestCase<Int>(
        desc = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–µ–Ω–∏—è 2 + 2",
        validator = { result ->
            if (result.value == 4) {
                println("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
            } else {
                println("–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –æ–∂–∏–¥–∞–ª–æ—Å—å 4, –ø–æ–ª—É—á–µ–Ω–æ ${result.value}")
            }
        },
        mockFun = {
            println("–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç 4")
            // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        }
    )

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
    testCase.mockFun()

    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    val result = Result(4)  // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    testCase.validator?.invoke(result)
}
```

#### –ü—Ä–∏–º–µ—Ä 2: –¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º generics

```kotlin
fun main() {
    val testCase = TestCase<String>(
        desc = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫",
        validator = { result ->
            if (result.value == "Hello, World!") {
                println("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
            } else {
                println("–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –æ–∂–∏–¥–∞–ª–æ—Å—å 'Hello, World!', –ø–æ–ª—É—á–µ–Ω–æ '${result.value}'")
            }
        },
        mockFun = {
            println("–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç 'Hello, World!'")
            // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        }
    )

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
    testCase.mockFun()

    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    val result = Result("Hello, World!")  // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    testCase.validator?.invoke(result)
}
```

### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:

1. **`validator: ((Result<T>) -> Unit)?`**:
   - –≠—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `Result<T>` –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (`Unit`).
   - –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞. –í–Ω—É—Ç—Ä–∏ –ª—è–º–±–¥—ã –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏.
   - –õ—è–º–±–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å `null`, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ `nullable` (`?`).

2. **`mockFun: () -> Unit`**:
   - –≠—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
   - –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏.

### –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–∞—Ö:

- **`mockFun`** –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏).
- –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è **`validator`**, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –ø—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç –∏–ª–∏ –Ω–µ—Ç.

### –ü—Ä–∏–º–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Spring Boot

–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å:

```kotlin
@Service
class MyService {
    fun add(a: Int, b: Int): Int {
        return a + b
    }
}
```

–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:

```kotlin
@SpringBootTest
class MyServiceTest {

    @Autowired
    lateinit var myService: MyService

    @Test
    fun testAddition() {
        val testCase = TestCase<Int>(
            desc = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–µ–Ω–∏—è 2 + 2",
            validator = { result ->
                assertEquals(4, result.value)
            },
            mockFun = {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
        )

        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
        testCase.mockFun()

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
        val result = Result(myService.add(2, 2))

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        testCase.validator?.invoke(result)
    }
}
```

–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ:
- `mockFun` –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥–º–µ–Ω—ã –≤—ã–∑–æ–≤–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
- `validator` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ `add` –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –µ–≥–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.

### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–õ—è–º–±–¥—ã –≤ Kotlin ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–Ω–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–±–∫–∏—Ö –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å! üòä


–∞ –∑–∞—á–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É –∫–æ–¥–∞: testCase.validator?.invoke(result)
–û—Ç–∫—É–¥–∞ –≤–∑—è–ª–æ—Å—å 'invoke'? –Ø –∂–µ –Ω–µ –æ–ø–∏—Å—ã–≤–∞–ª —Ä–∞–Ω–µ–µ 'invoke', —á—Ç–æ —ç—Ç–æ?

–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º, —á—Ç–æ —Ç–∞–∫–æ–µ `invoke` –∏ –∑–∞—á–µ–º –æ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.

### –ß—Ç–æ —Ç–∞–∫–æ–µ `invoke`?

–í Kotlin `invoke` ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é. –ï—Å–ª–∏ —É –∫–ª–∞—Å—Å–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ `invoke`, —Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é.

–ù–∞–ø—Ä–∏–º–µ—Ä:

```kotlin
class Adder {
    operator fun invoke(a: Int, b: Int): Int {
        return a + b
    }
}

val adder = Adder()
val result = adder(2, 3)  // –í—ã–∑–æ–≤ invoke
println(result)  // –í—ã–≤–æ–¥: 5
```

–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ `adder(2, 3)` —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ `invoke` —É –æ–±—ä–µ–∫—Ç–∞ `adder`.

### –õ—è–º–±–¥—ã –∏ `invoke`

–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ Kotlin ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –£ –Ω–∏—Ö –µ—Å—Ç—å –º–µ—Ç–æ–¥ `invoke`, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ª—è–º–±–¥—É –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é.

–ù–∞–ø—Ä–∏–º–µ—Ä:

```kotlin
val sum = { a: Int, b: Int -> a + b }
val result = sum.invoke(2, 3)  // –í—ã–∑–æ–≤ invoke
println(result)  // –í—ã–≤–æ–¥: 5
```

–ù–æ –≤ Kotlin –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ª—è–º–±–¥—É –∏ –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ `invoke`:

```kotlin
val result = sum(2, 3)  // –¢–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ sum.invoke(2, 3)
println(result)  // –í—ã–≤–æ–¥: 5
```

### –ó–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `invoke` –≤ —Ç–≤–æ–µ–º –ø—Ä–∏–º–µ—Ä–µ?

–í —Ç–≤–æ–µ–º –ø—Ä–∏–º–µ—Ä–µ `validator` ‚Äî —ç—Ç–æ nullable –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è (`((Result<T>) -> Unit)?`). –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å nullable –ª—è–º–±–¥—É, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ (`?.`), –∏–Ω–∞—á–µ –∫–æ–¥ –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è.

–í–æ—Ç –ø–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `testCase.validator?.invoke(result)`:

- `testCase.validator?` ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å `NullPointerException`, –µ—Å–ª–∏ `validator` —Ä–∞–≤–µ–Ω `null`.
- `invoke(result)` ‚Äî –≤—ã–∑–æ–≤ –ª—è–º–±–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º `result`.

### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

–ï—Å–ª–∏ –±—ã `validator` –Ω–µ –±—ã–ª nullable, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é:

```kotlin
testCase.validator(result)
```

–ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É `validator` –º–æ–∂–µ—Ç –±—ã—Ç—å `null`, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤:

```kotlin
testCase.validator?.invoke(result)
```

### –ü—Ä–∏–º–µ—Ä –±–µ–∑ `invoke`

–ï—Å–ª–∏ –±—ã `validator` –Ω–µ –±—ã–ª nullable, –∫–æ–¥ –≤—ã–≥–ª—è–¥–µ–ª –±—ã —Ç–∞–∫:

```kotlin
data class TestCase<T>(
    val desc: String,
    val validator: (Result<T>) -> Unit,  // –ù–µ nullable
    val mockFun: () -> Unit
)

fun main() {
    val testCase = TestCase<Int>(
        desc = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–µ–Ω–∏—è 2 + 2",
        validator = { result ->
            if (result.value == 4) {
                println("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
            } else {
                println("–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –æ–∂–∏–¥–∞–ª–æ—Å—å 4, –ø–æ–ª—É—á–µ–Ω–æ ${result.value}")
            }
        },
        mockFun = {
            println("–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç 4")
        }
    )

    testCase.mockFun()
    val result = Result(4)
    testCase.validator(result)  // –ë–µ–∑ invoke, —Ç–∞–∫ –∫–∞–∫ validator –Ω–µ nullable
}
```

### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

- `invoke` ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é.
- –í —Å–ª—É—á–∞–µ —Å –ª—è–º–±–¥–∞–º–∏ `invoke` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ª—è–º–±–¥—ã.
- –ï—Å–ª–∏ –ª—è–º–±–¥–∞ nullable, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ (`?.`) –∏ —è–≤–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å `invoke`.

–ù–∞–¥–µ—é—Å—å, —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–µ! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–π ‚Äî —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä


–°–ª—É—à–∞–π, –≤–æ—Ç –æ–ø—è—Ç—å –≤ –≥–æ–ª–æ–≤–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—è–º–±–¥: "–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ Kotlin ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å." –ê –º–æ–∂–µ—à—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –º–Ω–µ –ø—Ä–∏–º–µ—Ä ,–∫–∞–∫ –±—ã –º—ã –ø–∏—Å–∞–ª–∏ –∫–æ–¥, –µ—Å–ª–∏ –±—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–¥—É–º–∞–Ω—ã –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è?

–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª –∫–æ–¥ –±–µ–∑ –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∏ —Å—Ä–∞–≤–Ω–∏–º –µ–≥–æ —Å –∫–æ–¥–æ–º, –≥–¥–µ –ª—è–º–±–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª—è–º–±–¥—ã —É–ø—Ä–æ—â–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞.

### –ë–µ–∑ –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–π

–ë–µ–∑ –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–ª–∏ —è–≤–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –î–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.

#### –ü—Ä–∏–º–µ—Ä: –§—É–Ω–∫—Ü–∏—è `map` –±–µ–∑ –ª—è–º–±–¥

–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –∏ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑–≤–µ—Å—Ç–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç). –ë–µ–∑ –ª—è–º–±–¥ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

```kotlin
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
interface Function1<in T, out R> {
    fun invoke(param: T): R
}

// –§—É–Ω–∫—Ü–∏—è map, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
fun <T, R> List<T>.map(transform: Function1<T, R>): List<R> {
    val result = mutableListOf<R>()
    for (item in this) {
        result.add(transform.invoke(item))
    }
    return result
}

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    val squared = numbers.map(object : Function1<Int, Int> {
        override fun invoke(param: Int): Int {
            return param * param
        }
    })

    println(squared)  // –í—ã–≤–æ–¥: [1, 4, 9, 16, 25]
}
```

### –° –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏

–¢–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Ç–æ—Ç –∂–µ –∫–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–π:

```kotlin
// –§—É–Ω–∫—Ü–∏—è map —Å –ª—è–º–±–¥–æ–π
fun <T, R> List<T>.map(transform: (T) -> R): List<R> {
    val result = mutableListOf<R>()
    for (item in this) {
        result.add(transform(item))
    }
    return result
}

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    val squared = numbers.map { it * it }

    println(squared)  // –í—ã–≤–æ–¥: [1, 4, 9, 16, 25]
}
```

### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ

1. **–ë–µ–∑ –ª—è–º–±–¥**:
   - –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏.
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
   - –ö–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–º –∏ —Å–ª–æ–∂–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è.

2. **–° –ª—è–º–±–¥–∞–º–∏**:
   - –õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
   - –ö–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º.

### –ï—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä: –§—É–Ω–∫—Ü–∏—è `filter`

#### –ë–µ–∑ –ª—è–º–±–¥

```kotlin
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
interface Predicate<in T> {
    fun test(param: T): Boolean
}

// –§—É–Ω–∫—Ü–∏—è filter, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
fun <T> List<T>.filter(predicate: Predicate<T>): List<T> {
    val result = mutableListOf<T>()
    for (item in this) {
        if (predicate.test(item)) {
            result.add(item)
        }
    }
    return result
}

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞
    val evenNumbers = numbers.filter(object : Predicate<Int> {
        override fun test(param: Int): Boolean {
            return param % 2 == 0
        }
    })

    println(evenNumbers)  // –í—ã–≤–æ–¥: [2, 4]
}
```

#### –° –ª—è–º–±–¥–∞–º–∏

```kotlin
// –§—É–Ω–∫—Ü–∏—è filter —Å –ª—è–º–±–¥–æ–π
fun <T> List<T>.filter(predicate: (T) -> Boolean): List<T> {
    val result = mutableListOf<T>()
    for (item in this) {
        if (predicate(item)) {
            result.add(item)
        }
    }
    return result
}

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞
    val evenNumbers = numbers.filter { it % 2 == 0 }

    println(evenNumbers)  // –í—ã–≤–æ–¥: [2, 4]
}
```

### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–∞—é—Ç –∫–æ–¥, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º. –ë–µ–∑ –ª—è–º–±–¥ –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, —á—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–±—ä–µ–º –∫–æ–¥–∞ –∏ —É—Å–ª–æ–∂–Ω—è–µ—Ç –µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –õ—è–º–±–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã.

–ù–∞–¥–µ—é—Å—å, —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–µ, –∫–∞–∫ –ª—è–º–±–¥—ã —É–ø—Ä–æ—â–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞! –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–π ‚Äî —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä



